<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[RAS加密]]></title>
    <url>%2F2018%2F03%2F21%2FRAS%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[概念质数质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数。 互质在数论中，如果两个或两个以上的整数的最大公约数是 1，则称它们为互质。例如 8 与 10 的最大公约数是 2，不是 1，因此它们并不互质。又例如 7, 10, 13 的最大公约数是 1，因此它们互质。 关于互质关系，不难得到以下结论： 1. 两个不同的素数一定互质。例如，2与7、13与19。 2. 一个素数，另一个不为它的倍数，这两个数互质。例如，3与10、5与 26。 3. 1和任何一个自然数都互质。如1和9908。 4. 相邻两个自然数互质。如15与16。 5. 相邻两个奇数互质。如49与51。 6. 较大数是素数，则两个数互质。如97与88。 7. 两数和是素数，则两个数互质。如52与45。 8. … 欧拉函数在数论中，对正整数 n，欧拉函数 φ(n) 是小于或等于n的正整数中与 n 互质的数的数目。此函数以其首名研究者欧拉命名，它又称为 φ函数（由高斯所命名）。例如 φ(8) = 4，因为 1,3,5,7 均和 8 互质。 如果 n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系。 如果n是质数， 则 φ(n) = n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。 如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)， 则 φ(p^k) = p^k - p^(k-1) 如果 p,q 是质数, n = p q，则 φ(n) = φ(p) φ(q) = (p-1) * (q-1) 欧拉定理若 a,n 互质, a^φ(n) ≡ 1 mod n 费马小定理若 n=p , a^(p-1) ≡ 1 mod n 模反元素若 a,n 互质, ab ≡ 1 mod n a^φ(n) = a * a^(φ(n)-1) ≡ 1 mod n 。则 a^φ(n)-1 为 a 的模反元素 密钥生成 第一步，随机选择两个不相等的质数p和q p = 61, q = 53（实际应用中，这两个质数越大，就越难破解。） 第二步，计算p和q的乘积n n = 61×53 = 3233 (n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。) 第三步，计算n的欧拉函数φ(n)。 根据 φ(n) = (p-1)(q-1) ， φ(3233) = 60 * 52 = 3120 第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。 在1到3120之间，随机选择了17， e = 17。 第五步，计算e对于φ(n)的模反元素d。ed ≡ 1 (mod φ(n)) 这个式子等价于ed - 1 = kφ(n) 于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。 ex + φ(n)y = 1 已知 e=17, φ(n)=3120 17x + 3120y = 1找出一组整数解&nbsp; x=-367,y=2 &nbsp;在找到 p a+q b = Gcd(a, b) 的一组解 p0,q0 后，p a+q b = Gcd(a, b) 的其他整数解满足： p = p0 + b/Gcd(a, b) * t q = q0 - a/Gcd(a, b) * t(其中t为任意整数) 推出以下解： 用扩展欧几里德算法求出，一组整数解为 (x,y)=(2753,-15) 加密和解密 加密要用公钥 (n,e)，公钥是 (3233, 17) me ≡ c (mod n)假设 m=65 推出下面等式 6517 ≡ 2790 (mod 3233)即 c = 2790 解密要用私钥(n,d)，私钥(3233, 2753) cd ≡ m (mod n)推出下面等式 2790^2753 ≡ 65 (mod 3233)即 m = 65]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>RAS加密</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Elastic Stack 搭建]]></title>
    <url>%2F2017%2F09%2F30%2FELKB%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 因需要对 log 进行收集处理，简单搜了下后决定还是使用 Elastic Stack ，开源且成熟，而且 Elasticsearch 是一个基于 Apache Lucene 的开源搜索引擎，Lucene 我就不多介绍了，感兴趣的可以自己查下资料，Lucene 还是不错的。不啰嗦，进入正题 ！ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Elastic Stack 主要分四个模块，Beats, Logstash, Elasticsearch 和 Kibana 。简单说下，Beats 主要负责采集数据，而我主要用 FileBeat 和 HeartBeat ，前者日志收集后者是服务器和项目的心跳收集；Logstash 主要实时解析和转换数据；Elasticsearch 在存储数据的同时还是分布式的 RESTful 风格的搜索和数据分析引擎；Kibana 能够可视化 Elasticsearch 中的数据并操作 Elastic Stack。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ELK 我主要使用容器搭建，Beats则直接安装在边缘服务器上，由于5.6.2开始搭载 X-Pack ，各个部分直接连接已经需要权限，所以初次搭建的时候就没用 docker compose ，接下来，我会一一介绍各个部分的快速部署及部分注意点。]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>log</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务号开发踩坑记录]]></title>
    <url>%2F2017%2F07%2F30%2F%E5%BE%AE%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[最近因为需求，在开发服务号，难度不大，主要注意一些坑由于我用 go 开发，所以贴的代码段都是 go 写的 配置和服务号对接，只支持80和443端口，如果被占用了，nginx 转发一下 假如你服务器的 url 是 127.0.0.1:8080/url ，找到你的 nginx.conf ，在其中加入如下代码，443同理 1234567891011121314server &#123; listen 80; server_name localhost; ... location /url&#123; proxy_pass http://127.0.0.1:8080/url ; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; ...&#125; 配置完以后 nginx -t 检测一下，然后重启就ok了 nginx -s reload 若提示配置失败，可以去查看一下服务器是否能收到服务号的 get 请求，获取的参数是否正确，签名是否加密正确等等 获取 access_token建议只有唯一的服务器可以获取 access_token ，避免出现有效时间(7200s)内 token 失效的情况，返回 errcode 40001 此外，还可以提供被动刷新 access_token 的接口，这样一旦出现意外，可以外部触发 access_token 的刷新 菜单自定菜单，要求必须的参数的值不仅要传且不能为空 可以监听用户对菜单的操作，以下操作会有推送 点击菜单拉取消息时的事件推送 点击菜单跳转链接时的事件推送 scancode_push：扫码推事件的事件推送 scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框的事件推送 pic_sysphoto：弹出系统拍照发图的事件推送 pic_photo_or_album：弹出拍照或者相册发图的事件推送 pic_weixin：弹出微信相册发图器的事件推送 location_select：弹出地理位置选择器的事件推送 ps: 第3个到第8个的所有事件，仅支持微信iPhone5.4.1以上版本，和Android5.4以上版本的微信用户 消息接收消息微信推来的消息是 xml 格式的，我的接收消息的 struct 是这样的，主要接收一些事件和文本消息 123456789101112// 微信推的消息type WechatPush struct &#123; XMLName xml.Name `xml:&quot;xml&quot;` ToUserName string // 开发者微信号 FromUserName string // 发送方帐号（一个OpenID） CreateTime int // 消息创建时间 （整型） MsgType string // 消息类型 text event 等 Event string // 事件类型 EventKey string // 事件KEY值 Content string // 文本消息内容 MsgId int64 // 消息id&#125; 同时，监听到这些消息后可以对用户做出相应的回应，关键词回复也可在这里完成 那么问题来了，如果你监听到了用户的文本消息，且不作出回应的话，就会出现问题 假如服务器无法保证在五秒内处理并回复，必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试（这种情况下，可以使用客服消息接口进行异步回复），否则，将出现严重的错误提示。微信都会在公众号会话中，向用户下发系统提示“该公众号暂时无法提供服务，请稍后再试”。 解决办法如下： 直接回复success（推荐方式） 直接回复空串（指字节长度为0的空字符串，而不是XML结构体中content字段的内容为空） 见下文(如果有客服的话) 客服消息没遇到什么问题，简单说下转发消息给客服，这是新版客服功能。之前有说过，可以监听到用户操作反馈的消息，那么就可以转发给客服。只需要将 MsgType 设置为 transfer_customer_service ，若要指定客服，带上参数 KfAccount (会话接入的客服账号) 模版消息这里也比较简单，模版可以在模版库里搜索和添加，当然也可以自定义，每月仅三次 其他第三方若想拿到当前微信用户的 openid ，可以通过微信网页授权来完成。 结尾若有什么问题和疑问，可以给通过邮件或者微信等方式联系我]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>go</tag>
        <tag>服务号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2017%2F07%2F10%2F%E6%97%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 之前的博客好久没整理了，现在也懒得去把它们翻出来。刚好年初的时候看到了 hexo 和 next ，感觉挺不错的。闲暇之余，又把博客重新拾起来，每天都比较忙，零碎的时间有时不知做些什么，思考了下还是写日志吧，写写技术分享，写写踩的坑，再偶尔写写随笔记录下自己，就酱紫。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 博客初建，有待优化，内容也会慢慢填充起来，欢迎大家提建议。关于里有我的联系方式。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 初次见面，请多指教！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>第一篇</tag>
        <tag>不知所云</tag>
      </tags>
  </entry>
</search>
